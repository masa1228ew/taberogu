package com.example.taberogu.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.taberogu.Service.PassService;
import com.example.taberogu.entity.User;
import com.example.taberogu.form.PasswordEditForm;
import com.example.taberogu.security.UserDetailsImpl;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/pass")
public class PassController {
	 @Autowired
	    private PassService passService;
	    
	    @Autowired
	    private JavaMailSender mailSender;
	    
	    @GetMapping
	    public String showPasswordEditForm(Model model) {
	        model.addAttribute("passwordEditForm", new PassForm());
	        return "auth/pass";
	    }

	    @PostMapping
	    public String handlePasswordReset(@Valid PassworEditForm form, BindingResult bindingResult, Model model) {
	        if (bindingResult.hasErrors()) {
	            return "auth/passreset";
	        }

	        String email = form.getEmail();
	        User user = passService.findUserByEmail(email);
	        if (user == null) {
	            model.addAttribute("errorMessage", "メールアドレスが登録されていません。");
	            return "auth/passreset";
	        }

	        String token = UUID.randomUUID().toString();
	        passService.createPasswordResetTokenForUser(user, token);

	        String resetUrl = "http://localhost:8080/passwordedit?token=" + token;
	        
	        SimpleMailMessage emailMessage = new SimpleMailMessage();
	        emailMessage.setTo(email);
	        emailMessage.setSubject("パスワードリセットリクエスト");
	        emailMessage.setText("以下のURLよりパスワードをリセットしてください。\n" + resetUrl);

	        mailSender.send(emailMessage);

	        model.addAttribute("successMessage", "ご入力いただいたメールアドレスに認証メールを送信しました。メールに記載されているリンクをクリックし、会員登録を完了してください。");
	        return "auth/passreset";
	    }
	    
	    @GetMapping("/edit")
	    public String showPasswordEditForm(@RequestParam("token") String token, Model model) {
	        PasswordEditForm passwordEditForm = new PasswordEditForm();
	        passwordEditForm.setToken(token);
	        model.addAttribute("passwordEditForm", passwordEditForm);
	        return "auth/passedit";
	    }
	    
	    @PostMapping("/update")
	    public String updatePassword(@Valid PasswordEditForm form, BindingResult bindingResult, Model model) {
	        if (bindingResult.hasErrors()) {
	            return "auth/passwordedit";
	        }

	        String result = passwordService.validatePasswordResetToken(form.getToken());
	        if (result != null) {
	            model.addAttribute("errorMessage", "トークンが無効または期限切れです。");
	            return "auth/passwordedit";
	        }
	        
	        User user = passwordService.getUserByPasswordResetToken(form.getToken());
	        if (user == null) {
	            model.addAttribute("errorMessage", "ユーザーが見つかりませんでした。");
	            return "auth/passedit";
	        }
	        
	        passService.updatePassword(user, form.getPassword());
	        
	        return "redirect:/login";
	    }
	    
	    
	    
	    
	    
	    
	    
	    
	    
	@GetMapping
	public String index(Model model) {

		model.addAttribute("passwordEditForm", new PasswordEditForm());

		return "/edit";
	}

	@PostMapping("/update")
	public String change(@RequestParam(name = "id") Integer id,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			@ModelAttribute @Validated PasswordEditForm passwordChangeForm, BindingResult bindingResult,
			RedirectAttributes redirectAttributes) {
		User user = userRepository.getReferenceById(id);

		return "redirect:/";
	}
}
