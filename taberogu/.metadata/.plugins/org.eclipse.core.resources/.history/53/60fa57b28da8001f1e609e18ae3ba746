package com.example.taberogu.controller;


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.taberogu.Service.ShopService;
import com.example.taberogu.entity.Shop;
import com.example.taberogu.form.ShopRegisterForm;
import com.example.taberogu.repository.ShopRepository;
@Controller
@RequestMapping("/admin/shop")
public class AdminShopController { 
 private final ShopRepository shopRepository; 
 private final ShopService shopService;  
     
     public AdminShopController(ShopRepository shopRepository, ShopService shopService) {
         this.shopRepository = shopRepository;        
         this.shopService = shopService; 
     }	
     
     @GetMapping
     public String index(Model model,@PageableDefault Pageable pageable, @RequestParam(name = "keyword", required = false) String keyword,
    		 @RequestParam(name = "category", required = false) String category)  {
    	 
    	 Page<Shop> shopPage;
    	 
    	  if (keyword != null && !keyword.isEmpty()) {
              shopPage = shopRepository.findByNameLike("%" + keyword + "%", pageable);                
          }
    	  else if(category != null && !category.isEmpty()){
    		  shopPage = shopRepository.findByCategory( category , pageable);
    	  }
    	  else {
              shopPage = shopRepository.findAll(pageable);
          }  
    	 model.addAttribute("shopPage",shopPage);
    	 model.addAttribute("keyword", keyword);
    	 model.addAttribute("category", category);
    	 
    	 return "admin/shop/index";
     }

     @GetMapping("/{id}")
     public String show(@PathVariable(name = "id") Integer id, Model model) {
         Shop shop = shopRepository.getReferenceById(id);
         
         model.addAttribute("shop", shop);
         
         return "admin/shop/show";
     }    
     
     @GetMapping("/register")
     public String register(Model model) {
         model.addAttribute("shopRegisterForm", new ShopRegisterForm());
         return "admin/shop/register";
     }    
     
     @PostMapping("/create")
     public String create(@ModelAttribute @Validated ShopRegisterForm shopRegisterForm, BindingResult bindingResult, RedirectAttributes redirectAttributes) {        
         if (bindingResult.hasErrors()) {
             return "admin/shop/register";
         }
         
         shopService.create(shopRegisterForm);
         redirectAttributes.addFlashAttribute("successMessage", "民宿を登録しました。");    
         
         return "redirect:/admin/shop";
     }    
     
     @GetMapping("/{id}/edit")
     public String edit(@PathVariable(name = "id") Integer id, Model model) {
         Shop shop = shopRepository.getReferenceById(id);
         String imageName = shop.getImageName();
         ShopEditForm shopEditForm = new ShopEditForm(shop.getId(), house.getName(), null, house.getDescription(), house.getPrice(), house.getCapacity(), house.getPostalCode(), house.getAddress(), house.getPhoneNumber());
         
         model.addAttribute("imageName", imageName);
         model.addAttribute("shopEditForm", shopEditForm);
         
         return "admin/shop/edit";
     }    
     
     @PostMapping("/{id}/update")
     public String update(@ModelAttribute @Validated ShopEditForm shopEditForm, BindingResult bindingResult, RedirectAttributes redirectAttributes) {        
         if (bindingResult.hasErrors()) {
             return "admin/shop/edit";
         }
         
         shopService.update(shopEditForm);
         redirectAttributes.addFlashAttribute("successMessage", "民宿情報を編集しました。");
         
         return "redirect:/admin/shop";
     }    
//	@GetMapping
//	public String index() {
//		return "admin/shop/index";
//	}

}
