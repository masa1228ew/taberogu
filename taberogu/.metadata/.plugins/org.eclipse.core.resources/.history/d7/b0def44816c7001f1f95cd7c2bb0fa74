package com.example.taberogu.Service;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.example.taberogu.entity.User;
import com.example.taberogu.repository.UserRepository;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Customer;
import com.stripe.model.Invoice;
import com.stripe.model.InvoiceCollection;
import com.stripe.model.PaymentIntent;
import com.stripe.model.PaymentMethod;
import com.stripe.model.PaymentMethodCollection;
import com.stripe.model.Subscription;
import com.stripe.param.SubscriptionListParams;

@Service
public class StripeService {
	 private final UserRepository userRepository;
	 @Value("${stripe.api-key}")
	    private String stripeApiKey;
//	 private static final Logger logger = LoggerFactory.getLogger(StripeService.class);
	 
	 public StripeService(UserRepository userRepository) {
		 this.userRepository = userRepository;
	 }
	// Spring FrameworkやSpring BootなどのJavaベースのフレームワークで使用されるアノテーション
		// ・Springの依存性注入機能を使用して、外部の構成ファイルや環境変数から値を注入するために使用される
		// ・"${stripe.api-key}"：外部の構成ファイルや環境変数から取得したい値を指定するプレースホルダー
		// ・stripe.api-key：プロパティキーで、外部の構成ファイル（例えば、application.propertiesやapplication.yml）や環境変数にこのキーに対応する値が設定されていることを期待している
		// 		Springは自動的にstripe.api-keyに対応する値を取得し、@Valueアノテーションが付けられたフィールドやメソッドの引数に注入する
//		@Value("${stripe.api-key}")
		// stripeApiKeyフィールドに外部の構成から取得されたAPIキーを注入する
//		private String stripeApiKey;
		
     // セッションを作成し、Stripeに必要な情報を返す
//		public String createCheckoutSession(User user, HttpServletRequest httpServletRequest) throws StripeException {
	        
//		    Stripe.apiKey = stripeApiKey;

		    // 顧客作成のパラメーターを構築
//		    CustomerCreateParams customerParams = 
//		        CustomerCreateParams.builder()
//		            .setName(user.getName())
//		            .setEmail(user.getEmail())
//		            .build();
		            
		    // Stripe上に顧客を作成
//		    Customer customer = Customer.create(customerParams);

		    // 顧客IDをユーザーテーブルにセット＆保存 (事前に顧客IDのフィールドがあることを前提)
//		    user.setCustomerId(customer.getId());
//		    userRepository.save(user);

		    // セッション作成のためのパラメーターを構築する
//		    SessionCreateParams params =
//		        SessionCreateParams.builder()
//		            .addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
//		            .addLineItem(
//		                SessionCreateParams.LineItem.builder()
//		                    .setQuantity(1L)
//		                    .setPrice("price_1QTlYlBZ4UD9z1bMerQL8aai")
//		                    .build()
//		            )
//		            .setMode(SessionCreateParams.Mode.SUBSCRIPTION)
//		            .setCustomer(customer.getId())  // ここで顧客IDを設定
//		            .setSuccessUrl("http://localhost:8080/user/success?session_id={CHECKOUT_SESSION_ID}")
//		            .setSuccessUrl("http://localhost:8080/user/success?session_id={CHECKOUT_SESSION_ID}")
//		            .setCancelUrl("http://localhost:8080/user/cancel")
//		            .build();
		    
		    
//		    try {
		        // Stripe APIを呼び出してセッションを作成
//		        Session session = Session.create(params);
//		        return session.getId();
//		        var sessionId = session.getId();
//	 			System.out.println(sessionId);
//	 			System.out.println("テストトライ");
//	 			return sessionId;
//		    } catch (StripeException e) {
//		        e.printStackTrace();
//		    	System.out.println(e);
//		        throw e;
//		    	logger.error("Stripe API error", e);
//		        throw new RuntimeException("Stripe セッションの作成中にエラーが発生しました。詳細: " + e.getMessage());
//		    }
//		}
	
	
//	 @Value("${stripe.api-key}")
//	    private String stripeApiKey;
	    
	    public Customer createCustomer(User user) {
	        Stripe.apiKey = stripeApiKey;
	        Customer customer = null;

	        Map<String, Object> customerParams = new HashMap<>();
//	        Customer customer = stripeService.createCustomer(name, email, paymentMethodId);

	        customerParams.put("name", user.getName());
	        customerParams.put("email", user.getEmail());        

	        try {
	            customer = Customer.create(customerParams);
	            user.setCustomerId(customer.getId());
	            
	            Map<String, Object> params = new HashMap<>();
	            params.put("customer", customer.getId());
	            userRepository.save(user);
//	            PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
//	            paymentMethod.attach(params);
	            
	            Map<String, Object> updateParams = new HashMap<>();
//	            updateParams.put("invoice_settings", Map.of("default_payment_method", paymentMethod.getId()));
	            customer.update(updateParams);
	        } catch (StripeException e) {
	            e.printStackTrace();
	            throw new RuntimeException("Stripeに顧客を作成した際にエラーが発生しました。", e);
	        }
	        
	        return customer;
	    }
	    
	    public Subscription createSubscription(String customerId, String planId) {
	        Stripe.apiKey = stripeApiKey;

	        Map<String, Object> item = new HashMap<>();
	        item.put("plan", planId);

	        Map<String, Object> items = new HashMap<>();
	        items.put("0", item);

	        Map<String, Object> params = new HashMap<>();        
	        
	        params.put("customer", customerId);
	        params.put("items", items);

	        try {
	            return Subscription.create(params);
	        } catch (StripeException e) {
	            throw new RuntimeException(e);
	        }
	    }
	    
	    public PaymentMethod getDefaultPaymentMethod(String customerId) {
	    	Stripe.apiKey = stripeApiKey;
	        try {
	            Map<String, Object> params = new HashMap<>();
	            params.put("customer", customerId);
	            params.put("type", "card");
	            PaymentMethodCollection paymentMethods = PaymentMethod.list(params);
	            
	            // 顧客が支払い方法を追加しているか確認する
	            if (!paymentMethods.getData().isEmpty()) {
	                return paymentMethods.getData().get(0);
	            }
	        } catch (StripeException e) {
	            e.printStackTrace();
	        }        
	        
	        // 顧客が支払い方法を追加していない場合、nullを返す
	        return null;       
	    }
	    
	    public void attachPaymentMethodToCustomer(String customerId, String paymentMethodId) throws StripeException {        
	        PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
	        Map<String, Object> params = new HashMap<>();
	        params.put("customer", customerId);
	        paymentMethod.attach(params);
	    }
	    
	    public void updateSubscription(String customerId, String paymentMethodId) throws StripeException {
	        attachPaymentMethodToCustomer(customerId, paymentMethodId);
	        Map<String, Object> params = new HashMap<>();
	        params.put("invoice_settings", Map.of("default_payment_method", paymentMethodId));
	        Customer customer = Customer.retrieve(customerId);
	        customer.update(params);

	    }
	    
	    public String getDefaultPaymentMethodId(String customerId) throws StripeException {
	        Customer customer = Customer.retrieve(customerId);
	        return customer.getInvoiceSettings().getDefaultPaymentMethod();
	    }
	    
	    public void detachPaymentMethod(String paymentMethodId) throws StripeException {
	        PaymentMethod paymentMethod = PaymentMethod.retrieve(paymentMethodId);
	        paymentMethod.detach();

	    }
	    
	    public Subscription getSubscription(String customerId) {
	        try {
	            SubscriptionListParams params = SubscriptionListParams.builder()
	                .setCustomer(customerId)
	                .build();

	            List<Subscription> subscriptions = Subscription.list(params).getData();

	            for (Subscription subscription : subscriptions) {
	                if ("active".equals(subscription.getStatus())) {
	                    return subscription;
	                }
	            }
	            
	            return null;            
	        } catch (StripeException e) { 
	            e.printStackTrace();
	            return null;
	        }
	    }

	    public void cancelSubscription(Subscription subscription) {
	        try {
	            subscription.cancel();
	        } catch (StripeException e) {
	            e.printStackTrace();
	        }
	    }
	    
	    // 月間売上を取得する
	    public long getMonthlyTotalRevenue(LocalDate month) throws StripeException {
	        Stripe.apiKey = stripeApiKey;

	        Instant firstDayOfMonthInstant = month.withDayOfMonth(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
	        Instant lastDayOfMonthInstant = month.plusMonths(1).withDayOfMonth(1).atStartOfDay(ZoneId.systemDefault()).toInstant();

	        long startTime = firstDayOfMonthInstant.getEpochSecond();
	        long endTime = lastDayOfMonthInstant.getEpochSecond();

	        Map<String, Object> params = new HashMap<>();
	        params.put("created", Map.of(
	            "gte", startTime,
	            "lt", endTime
	        ));        

	        InvoiceCollection invoices = Invoice.list(params);

	        long totalRevenueCents = 0;

	        for (Invoice invoice : invoices.getData()) {
	            totalRevenueCents += invoice.getAmountPaid();
	        }

	        return totalRevenueCents;
	    }
	    
	    public PaymentIntent createPaymentIntent(String customerId, int amount, String currency, String paymentMethodId) throws StripeException {
	        Stripe.apiKey = stripeApiKey;

	        Map<String, Object> params = new HashMap<>();
	        params.put("customer", customerId);
//	        params.put("amount", amount);
//	        params.put("currency", currency);
	        params.put("payment_method", paymentMethodId);
	        params.put("confirm", true);
	        params.put("off_session", true);

	        return PaymentIntent.create(params);
	    }
}
